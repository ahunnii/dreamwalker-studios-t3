import type { NextPage } from "next";
import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";

import Link from "next/link";
import Card from "../../components/Cards/Card";
import { LocalProduct } from "../../components/Cards/types";
import CustomJob from "../../components/CustomJob";
import Hero from "../../components/Hero";
import NavBar from "../../components/NavBar";
import { trpc } from "../../utils/trpc";
const Backup: NextPage = () => {
  const hello = trpc.example.hello.useQuery({ text: "from tRPC" });
  const { data: products } = trpc.product.getAll.useQuery();

  return (
    <>
      <Head>
        <title>Products | DreamWalker Studios</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />

      <main className="mx-auto min-h-screen max-w-7xl px-2 sm:px-6 lg:px-8">
        <h1 className="mb-5 mt-8 text-5xl  font-bold tracking-tight text-gray-700 md:text-[5rem]">
          All <span className="text-purple-300">Products</span> App
        </h1>

        <section className="mx-auto h-full max-w-7xl">
          <div className="mt-10 grid grid-cols-1 gap-4 md:grid-cols-2 lg:grid-cols-4">
            {products &&
              products.map((product) => (
                <Card key={product.name} product={product} />
              ))}
          </div>
        </section>

        <section>
          {products?.map((post) => {
            return (
              <article key={post.id}>
                <p>{post.name}</p>
                <Link href={`/products/${post.id}`}>View item</Link>
              </article>
            );
          })}
        </section>

        <div className="flex w-full items-center justify-center pt-6 text-2xl text-blue-500">
          {hello.data ? <p>{hello.data.greeting}</p> : <p>Loading..</p>}
        </div>
        <AuthShowcase />
      </main>

      <footer className="border-t-2 py-5 text-center">
        <p className="text-sm font-medium">
          ©2022 Made with ❤️ and ☕ by Andrew Hunn
        </p>
      </footer>
    </>
  );
};

export default Backup;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  if (sessionData?.user?.role !== "SUPER") {
    return <p>You have like no access hommie</p>;
  }

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}

      <p>{sessionData?.user?.role?.toLocaleString()}</p>

      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

type TechnologyCardProps = {
  name: string;
  description: string;
  documentation: string;
};

const TechnologyCard = ({
  name,
  description,
  documentation,
}: TechnologyCardProps) => {
  return (
    <section className="flex flex-col justify-center rounded border-2 border-gray-500 p-6 shadow-xl duration-500 motion-safe:hover:scale-105">
      <h2 className="text-lg text-gray-700">{name}</h2>
      <p className="text-sm text-gray-600">{description}</p>
      <a
        className="m-auto mt-3 w-fit text-sm text-violet-500 underline decoration-dotted underline-offset-2"
        href={documentation}
        target="_blank"
        rel="noreferrer"
      >
        Documentation
      </a>
    </section>
  );
};
