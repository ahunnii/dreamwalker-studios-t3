import type { NextPage } from "next";

import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";

import NavBar from "../../components/NavBar";
import { trpc } from "../../utils/trpc";
const Product: NextPage = () => {
  const router = useRouter();
  const [imageSrc, setImageSrc] = useState();
  const [uploadData, setUploadData] = useState();
  const [isUploading, setIsUploading] = useState(false);
  const [uploadingNewImage, setUploadingNewImage] = useState(false);
  const [imageId, setImageId] = useState("");
  const [selectedCategories, setSelectedCategories] = useState<Array<string>>(
    []
  );
  const [selectedTags, setSelectedTags] = useState<Array<string>>([]);
  const postId = router.query.id as string;
  const productUtil = trpc.useContext();
  // const { data, isLoading } = trpc.useQuery(['posts.single-post', { postId }])

  const { data: product, isLoading } = trpc.product.getOne.useQuery(postId);
  const { data: images } = trpc.product.getImages.useQuery();
  const { data: categories } = trpc.product.getCategories.useQuery();
  const { data: tags } = trpc.product.getTags.useQuery();

  const { mutate, error } = trpc.product.updateProduct.useMutation({
    onSuccess: ({ id }) => {
      router.reload();
    },
  });

  const { mutate: mutateImage, error: errorImage } =
    trpc.product.createImage.useMutation({
      onSuccess: ({ id }) => {
        productUtil.invalidate();

        setIsUploading(false);
        setImageId(id);
      },
    });

  const handleImageUpload = (e) => {
    const reader = new FileReader();

    reader.onload = (onLoadEvt) => {
      setImageSrc(onLoadEvt.target.result);
      setUploadData(undefined);
    };

    reader.readAsDataURL(e.target.files[0]);
  };

  const handleImageSubmit = async (event) => {
    event.preventDefault();
    setIsUploading(true);

    const form = event.currentTarget;
    const fileInput = Array.from(form.elements).find(
      ({ name }) => name === "file"
    );

    const formData = new FormData();

    for (const file of fileInput.files) {
      formData.append("file", file);
    }

    formData.append("upload_preset", "my-uploads");

    const data = await fetch(
      "https://api.cloudinary.com/v1_1/dqeszrzmc/image/upload",
      {
        method: "POST",
        body: formData,
      }
    ).then((r) => r.json());

    setImageSrc(data.secure_url);
    setUploadData(data);
    mutateImage({
      src: data?.secure_url,
    });
  };

  useEffect(() => {
    if (product && product.images) setImageId(product?.images[0]?.id ?? "");
    if (product && product.categories)
      setSelectedCategories(product?.categories.map((category) => category.id));
    if (product && product.tags)
      setSelectedTags(product?.tags.map((tag) => tag.id));
  }, [product]);

  if (isLoading) {
    return <p>Loading info...</p>;
  }
  const handleNameUpdate = (e) => {
    e.preventDefault();

    console.log(e.target.elements["name"].value);
    mutate({
      id: postId,
      imageId: imageId,
      description: e.target.elements["description"].value,
      name: e.target.elements["name"].value,
      price: parseFloat(e.target.elements["price"].value),
      tagline: e.target.elements["tagline"].value,
      categories: selectedCategories,
      tags: selectedTags,
    });
  };

  const handleImageUpdate = (id: string) => {
    setImageId(id);
  };

  const handleCategoriesUpdate = (id: string) => {
    if (selectedCategories.includes(id))
      setSelectedCategories(
        selectedCategories.filter((category) => category != id)
      );
    else setSelectedCategories([...selectedCategories, id]);
  };

  const handleTagsUpdate = (id: string) => {
    if (selectedTags.includes(id))
      setSelectedTags(selectedTags.filter((tag) => tag != id));
    else setSelectedTags([...selectedTags, id]);
  };

  const toggleUploadImageState = () => {
    setUploadingNewImage(!uploadingNewImage);
  };
  return (
    <>
      <Head>
        <title>Home | DreamWalker Studios</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <NavBar />

      <main className="container mx-auto flex min-h-screen flex-col items-center justify-center p-4">
        <h1 className="text-5xl font-extrabold leading-normal text-gray-700 md:text-[5rem]">
          {product?.name}
        </h1>

        <form
          className=" rounded-md p-12 shadow-lg"
          onSubmit={handleNameUpdate}
        >
          <div className="grid grid-cols-6 gap-6">
            <div className="col-span-6 sm:col-span-4">
              <label
                htmlFor="name"
                className="block text-sm font-medium text-gray-700"
              >
                Product Name
              </label>
              <input
                type="text"
                name="name"
                id="name"
                defaultValue={product?.name}
                placeholder="Give a unique-ish name for the product"
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              />
            </div>

            <div className="col-span-6 sm:col-span-2">
              <label
                htmlFor="price"
                className="block text-sm font-medium text-gray-700"
              >
                Price
              </label>
              <input
                type="number"
                name="price"
                step="0.01"
                id="price"
                placeholder="Price pre tax"
                defaultValue={product?.price}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              />
            </div>

            <div className="col-span-6 sm:col-span-4">
              <label
                htmlFor="description"
                className="block text-sm font-medium text-gray-700"
              >
                Description
              </label>
              <div className="mt-1">
                <textarea
                  id="description"
                  name="description"
                  rows={3}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  placeholder="Some random description"
                  defaultValue={product?.description}
                />
              </div>
              <p className="mt-2 text-sm text-gray-500">
                Brief description for the product.
              </p>
            </div>
            <div className="col-span-6 sm:col-span-4">
              <label
                htmlFor="categories"
                className="block text-sm font-medium text-gray-700"
              >
                Categories
              </label>
              <div className="my-2" id="categories">
                {categories &&
                  categories.map((c) => (
                    <span
                      className={`${
                        selectedCategories.includes(c.id) &&
                        "border-2 border-gray-800"
                      } mx-2 bg-slate-300 px-2 py-1 font-medium text-white`}
                      key={c.id}
                      onClick={() => handleCategoriesUpdate(c.id)}
                    >
                      {c.name}
                    </span>
                  ))}
              </div>
            </div>

            <div className="col-span-6 sm:col-span-4">
              <label
                htmlFor="tags"
                className="block text-sm font-medium text-gray-700"
              >
                Tags
              </label>
              <div className="my-2" id="tags">
                {tags &&
                  tags.map((t) => (
                    <span
                      className={`${
                        selectedTags.includes(t.id) &&
                        "border-2 border-gray-800"
                      } mx-2 bg-slate-300 px-2 py-1 font-medium text-white`}
                      key={t.id}
                      onClick={() => handleTagsUpdate(t.id)}
                    >
                      {t.name}
                    </span>
                  ))}
              </div>
            </div>

            <div className="col-span-6 sm:col-span-4">
              <label
                htmlFor="tagline"
                className="block text-sm font-medium text-gray-700"
              >
                Tagline
              </label>
              <input
                type="text"
                name="tagline"
                id="tagline"
                placeholder="Some random tagline for homepage"
                defaultValue={product?.tagline ?? ""}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
              />
            </div>

            <div className="col-span-6">
              <label
                htmlFor="tagline"
                className="block text-sm font-medium text-gray-700"
              >
                Image Selection
              </label>

              <div className="flex max-w-full flex-row">
                {images &&
                  imageId &&
                  images.map((image) => (
                    <div
                      className={`${
                        imageId == image.id ? `border-8 border-blue-500` : ""
                      } relative flex h-80 w-80`}
                      key={image.id}
                    >
                      <Image
                        src={image.src}
                        alt={image?.alt ?? ""}
                        layout="fill"
                        onClick={() => handleImageUpdate(image.id)}
                      />
                    </div>
                  ))}
              </div>
            </div>
          </div>

          <button
            type="submit"
            className="my-2 rounded-sm bg-blue-400 p-2 font-medium text-white disabled:cursor-not-allowed disabled:bg-blue-200"
            disabled={isUploading}
          >
            Submit Changes
          </button>
        </form>

        <form
          method="post"
          onChange={handleImageUpload}
          onSubmit={handleImageSubmit}
          className="w-full p-12 shadow-lg"
        >
          <label
            htmlFor="file"
            className="block text-sm font-medium text-gray-700"
          >
            Image Upload to Cloudinary
          </label>

          <input
            type="file"
            name="file"
            id="file"
            placeholder="File"
            className="w-full border-2 p-2"
          />
          <div
            className={`${!imageSrc && "hidden"} relative my-2 flex h-80 w-80`}
          >
            <Image src={imageSrc ?? ""} alt="" layout="fill" />
          </div>
          {isUploading && (
            <button
              type="button"
              className="inline-flex cursor-not-allowed items-center rounded-md bg-indigo-500 px-4 py-2 text-sm font-semibold leading-6 text-white shadow transition duration-150 ease-in-out hover:bg-indigo-400"
              disabled
            >
              <svg
                className="-ml-1 mr-3 h-5 w-5 animate-spin text-white"
                xmlns="http://www.w3.org/2000/svg"
                fill="none"
                viewBox="0 0 24 24"
              >
                <circle
                  className="opacity-25"
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="4"
                ></circle>
                <path
                  className="opacity-75"
                  fill="currentColor"
                  d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
                ></path>
              </svg>
              Processing...
            </button>
          )}

          {imageSrc && !uploadData && !isUploading && (
            <p>
              <button className="inline-flex items-center rounded-md bg-indigo-500 px-4 py-2 text-sm font-semibold leading-6 text-white shadow transition duration-150 ease-in-out hover:bg-indigo-400">
                Upload Files
              </button>
            </p>
          )}

          {uploadData && (
            <code>
              <pre>{JSON.stringify(uploadData, null, 2)}</pre>
            </code>
          )}
        </form>

        <AuthShowcase />
      </main>

      <footer className="border-t-2 py-5 text-center">
        <p className="text-sm font-medium">
          ©2022 Made with ❤️ and ☕ by Andrew Hunn
        </p>
      </footer>
    </>
  );
};

export default Product;

const AuthShowcase: React.FC = () => {
  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery();

  const { data: sessionData } = useSession();

  return (
    <div className="flex flex-col items-center justify-center gap-2">
      {sessionData && (
        <p className="text-2xl text-blue-500">
          Logged in as {sessionData?.user?.name}
        </p>
      )}
      {secretMessage && (
        <p className="text-2xl text-blue-500">{secretMessage}</p>
      )}
      <button
        className="rounded-md border border-black bg-violet-50 px-4 py-2 text-xl shadow-lg hover:bg-violet-100"
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};

/*
  This example requires some changes to your config:
  
  ```
  // tailwind.config.js
  module.exports = {
    // ...
    plugins: [
      // ...
      require('@tailwindcss/forms'),
    ],
  }
  ```
*/
export function Example() {
  return (
    <>
      <form action="#" method="POST">
        <div className="shadow sm:overflow-hidden sm:rounded-md">
          <div className="space-y-6 bg-white px-4 py-5 sm:p-6">
            <div className="grid grid-cols-3 gap-6">
              <div className="col-span-3 sm:col-span-2">
                <label
                  htmlFor="company-website"
                  className="block text-sm font-medium text-gray-700"
                >
                  Website
                </label>
                <div className="mt-1 flex rounded-md shadow-sm">
                  <span className="inline-flex items-center rounded-l-md border border-r-0 border-gray-300 bg-gray-50 px-3 text-sm text-gray-500">
                    http://
                  </span>
                  <input
                    type="text"
                    name="company-website"
                    id="company-website"
                    className="block w-full flex-1 rounded-none rounded-r-md border-gray-300 focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                    placeholder="www.example.com"
                  />
                </div>
              </div>
            </div>

            <div>
              <label
                htmlFor="about"
                className="block text-sm font-medium text-gray-700"
              >
                About
              </label>
              <div className="mt-1">
                <textarea
                  id="about"
                  name="about"
                  rows={3}
                  className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
                  placeholder="you@example.com"
                  defaultValue={""}
                />
              </div>
              <p className="mt-2 text-sm text-gray-500">
                Brief description for your profile. URLs are hyperlinked.
              </p>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Photo
              </label>
              <div className="mt-1 flex items-center">
                <span className="inline-block h-12 w-12 overflow-hidden rounded-full bg-gray-100">
                  <svg
                    className="h-full w-full text-gray-300"
                    fill="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path d="M24 20.993V24H0v-2.996A14.977 14.977 0 0112.004 15c4.904 0 9.26 2.354 11.996 5.993zM16.002 8.999a4 4 0 11-8 0 4 4 0 018 0z" />
                  </svg>
                </span>
                <button
                  type="button"
                  className="ml-5 rounded-md border border-gray-300 bg-white py-2 px-3 text-sm font-medium leading-4 text-gray-700 shadow-sm hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
                >
                  Change
                </button>
              </div>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700">
                Cover photo
              </label>
              <div className="mt-1 flex justify-center rounded-md border-2 border-dashed border-gray-300 px-6 pt-5 pb-6">
                <div className="space-y-1 text-center">
                  <svg
                    className="mx-auto h-12 w-12 text-gray-400"
                    stroke="currentColor"
                    fill="none"
                    viewBox="0 0 48 48"
                    aria-hidden="true"
                  >
                    <path
                      d="M28 8H12a4 4 0 00-4 4v20m32-12v8m0 0v8a4 4 0 01-4 4H12a4 4 0 01-4-4v-4m32-4l-3.172-3.172a4 4 0 00-5.656 0L28 28M8 32l9.172-9.172a4 4 0 015.656 0L28 28m0 0l4 4m4-24h8m-4-4v8m-12 4h.02"
                      strokeWidth={2}
                      strokeLinecap="round"
                      strokeLinejoin="round"
                    />
                  </svg>
                  <div className="flex text-sm text-gray-600">
                    <label
                      htmlFor="file-upload"
                      className="relative cursor-pointer rounded-md bg-white font-medium text-indigo-600 focus-within:outline-none focus-within:ring-2 focus-within:ring-indigo-500 focus-within:ring-offset-2 hover:text-indigo-500"
                    >
                      <span>Upload a file</span>
                      <input
                        id="file-upload"
                        name="file-upload"
                        type="file"
                        className="sr-only"
                      />
                    </label>
                    <p className="pl-1">or drag and drop</p>
                  </div>
                  <p className="text-xs text-gray-500">
                    PNG, JPG, GIF up to 10MB
                  </p>
                </div>
              </div>
            </div>
          </div>
          <div className="bg-gray-50 px-4 py-3 text-right sm:px-6">
            <button
              type="submit"
              className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
            >
              Save
            </button>
          </div>
        </div>
      </form>
    </>
  );
}
{
  <form action="#" method="POST">
    <div className="overflow-hidden shadow sm:rounded-md">
      <div className="bg-white px-4 py-5 sm:p-6">
        <div className="grid grid-cols-6 gap-6">
          <div className="col-span-6 sm:col-span-3">
            <label
              htmlFor="first-name"
              className="block text-sm font-medium text-gray-700"
            >
              First name
            </label>
            <input
              type="text"
              name="first-name"
              id="first-name"
              autoComplete="given-name"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-3">
            <label
              htmlFor="last-name"
              className="block text-sm font-medium text-gray-700"
            >
              Last name
            </label>
            <input
              type="text"
              name="last-name"
              id="last-name"
              autoComplete="family-name"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-4">
            <label
              htmlFor="email-address"
              className="block text-sm font-medium text-gray-700"
            >
              Email address
            </label>
            <input
              type="text"
              name="email-address"
              id="email-address"
              autoComplete="email"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-3">
            <label
              htmlFor="country"
              className="block text-sm font-medium text-gray-700"
            >
              Country
            </label>
            <select
              id="country"
              name="country"
              autoComplete="country-name"
              className="mt-1 block w-full rounded-md border border-gray-300 bg-white py-2 px-3 shadow-sm focus:border-indigo-500 focus:outline-none focus:ring-indigo-500 sm:text-sm"
            >
              <option>United States</option>
              <option>Canada</option>
              <option>Mexico</option>
            </select>
          </div>

          <div className="col-span-6">
            <label
              htmlFor="street-address"
              className="block text-sm font-medium text-gray-700"
            >
              Street address
            </label>
            <input
              type="text"
              name="street-address"
              id="street-address"
              autoComplete="street-address"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-6 lg:col-span-2">
            <label
              htmlFor="city"
              className="block text-sm font-medium text-gray-700"
            >
              City
            </label>
            <input
              type="text"
              name="city"
              id="city"
              autoComplete="address-level2"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-3 lg:col-span-2">
            <label
              htmlFor="region"
              className="block text-sm font-medium text-gray-700"
            >
              State / Province
            </label>
            <input
              type="text"
              name="region"
              id="region"
              autoComplete="address-level1"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>

          <div className="col-span-6 sm:col-span-3 lg:col-span-2">
            <label
              htmlFor="postal-code"
              className="block text-sm font-medium text-gray-700"
            >
              ZIP / Postal code
            </label>
            <input
              type="text"
              name="postal-code"
              id="postal-code"
              autoComplete="postal-code"
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm"
            />
          </div>
        </div>
      </div>
      <div className="bg-gray-50 px-4 py-3 text-right sm:px-6">
        <button
          type="submit"
          className="inline-flex justify-center rounded-md border border-transparent bg-indigo-600 py-2 px-4 text-sm font-medium text-white shadow-sm hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-offset-2"
        >
          Save
        </button>
      </div>
    </div>
  </form>;
}
